name: Build and Release Project

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows
          # - WebGL
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  release:
    name: Create or Update Pre-Release
    needs: buildForAllSupportedPlatforms
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch Git tags
        run: git fetch --tags --force

      - name: Determine next pre-release version
        id: version
        run: |
          # Get latest full release (not prerelease)
          latest_release=$(gh release list --limit 100 --json tagName,isPrerelease | jq -r '.[] | select(.isPrerelease==false) | .tagName' | sort -V | tail -n1)
          latest_prerelease=$(gh release list --limit 100 --json tagName,isPrerelease | jq -r '.[] | select(.isPrerelease==true) | .tagName' | sort -V | tail -n1)

          echo "Latest full release: $latest_release"
          echo "Latest pre-release: $latest_prerelease"

          version=${latest_release#v}
          IFS='.' read -r major minor patch <<< "$version"
          next="v$major.$minor.$((patch+1))"

          if [ "$latest_prerelease" == "$next" ]; then
            echo "Reusing existing pre-release: $next"
            echo "tag=$next" >> $GITHUB_OUTPUT
            echo "create_new=false" >> $GITHUB_OUTPUT
          else
            echo "Creating new pre-release: $next"
            echo "tag=$next" >> $GITHUB_OUTPUT
            echo "create_new=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create tag if needed
        if: steps.version.outputs.create_new == 'true'
        run: |
          if git rev-parse "${{ steps.version.outputs.tag }}" >/dev/null 2>&1; then
            echo "Tag ${{ steps.version.outputs.tag }} already exists. Skipping creation."
          else
            git tag ${{ steps.version.outputs.tag }}
            git push origin ${{ steps.version.outputs.tag }}
          fi

      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: Build-StandaloneWindows
          path: Builds/StandaloneWindows

      - name: Zip build
        run: |
          cd Builds/StandaloneWindows
          zip -r ../../Build-${{ steps.version.outputs.tag }}.zip ./*
          cd ../..

      - name: Create or Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          prerelease: true
          generate_release_notes: true
          files: Build-${{ steps.version.outputs.tag }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up
        run: rm Build-${{ steps.version.outputs.tag }}.zip