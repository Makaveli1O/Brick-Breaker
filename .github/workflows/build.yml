name: Build and Release Project

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows
          # - WebGL
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  release:
    name: Create Pre-Release
    needs: buildForAllSupportedPlatforms
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine pre-release version
        id: bump_version
        run: |
          set -e
          git fetch --tags --force

          # Get latest stable version (without -alpha)
          stable=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)

          # Get latest pre-release version (with -alpha)
          alpha=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-alpha$' | head -n1)

          if [ -n "$alpha" ]; then
            echo "Using existing alpha tag: $alpha"
            echo "new_tag=$alpha" >> "$GITHUB_OUTPUT"
          else
            version=${stable#v}
            IFS='.' read -r major minor patch <<< "$version"
            new_tag="v$major.$minor.$((patch+1))-alpha"
            echo "Creating new alpha tag: $new_tag"
            echo "new_tag=$new_tag" >> "$GITHUB_OUTPUT"
          fi

