name: Build and Release Project

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows
          # - WebGL
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-

      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.1

      - uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}

      - uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  release:
    name: Create Pre-Release
    needs: buildForAllSupportedPlatforms
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get next patch version
        id: version
        run: |
          git fetch --tags --force

          latest=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n1)
          echo "Latest tag is: $latest"

          if [ -z "$latest" ]; then
            echo "new_tag=v0.1.0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          version=${latest#v}
          IFS='.' read -r major minor patch <<< "$version"
          next_tag="v$major.$minor.$((patch+1))"

          echo "new_tag=$next_tag" >> "$GITHUB_OUTPUT"

      - name: Create or update tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git tag | grep -q "^${{ steps.version.outputs.new_tag }}$"; then
            echo "Tag already exists. Skipping creation."
          else
            git tag ${{ steps.version.outputs.new_tag }}
            git push origin ${{ steps.version.outputs.new_tag }}
          fi

      - name: Create or update GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.new_tag }}
          prerelease: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
